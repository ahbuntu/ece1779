vagrant up
vagrant ssh

sudo apt-get update
sudo apt-get install curl git-core nginx -y

# Install rbenv as 'root' user (system-wide)
# From: https://gist.github.com/jnx/1256593
sudo su -
git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv
 
# Add rbenv to the path:
echo '# rbenv setup' > /etc/profile.d/rbenv.sh
echo 'export RBENV_ROOT=/usr/local/rbenv' >> /etc/profile.d/rbenv.sh
echo 'export PATH="$RBENV_ROOT/bin:$PATH"' >> /etc/profile.d/rbenv.sh
echo 'eval "$(rbenv init -)"' >> /etc/profile.d/rbenv.sh
 
chmod +x /etc/profile.d/rbenv.sh
source /etc/profile.d/rbenv.sh
 
# Install ruby-build:
pushd /tmp
  git clone git://github.com/sstephenson/ruby-build.git
  cd ruby-build
  ./install.sh
popd
 
# Install JRuby
rbenv install jruby-1.7.19
rbenv global jruby-1.7.19
 
# Rehash:
rbenv rehash


# From: http://www.webupd8.org/2012/01/install-oracle-java-jdk-7-in-ubuntu-via.html
# install Java (Oracle Java 1.7)
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java7-installer
# echo oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections

# setup Oracle Java 7 env. vars
sudo apt-get install oracle-java7-set-default

# completely logout, then log back in as 'vagrant' user; verify jruby is default ruby
ruby -v

# install bundler as root
sudo su -
gem install bundler --no-ri --no-rdoc -V

# install gems as 'vagrant'
cd /vagrant
bundle install

# For reference, followed these guides...
# https://coderwall.com/p/ttrhow/deploying-rails-app-using-nginx-puma-and-capistrano-3
# http://blakewilliams.me/blog/system-wide-rbenv-install
# https://gist.github.com/jalberto/0cfc86174f4f7a3307d3

# Setup Puma to launch automatically: https://github.com/puma/puma/tree/master/tools/jungle/upstart
<<< TODO!!! >>>

# Other Puma, nginx resources:
# http://ruby-journal.com/how-to-setup-rails-app-with-puma-and-nginx/
# http://deployingjruby.blogspot.ca/

# setup /etc/hosts locally and on the Vagrant machine to point to 'sample.com'
vim /etc/hosts

# Initial deploy
cap production deploy:initial

# SSH in and install the nginx.conf
sudo ln -nfs /home/vagrant/apps/my_app/
sudo ln -nfs /home/vagrant/apps/my_app/current/config/nginx.conf  /etc/nginx/sites-enabled/my_app
sudo service nginx restart

### BOOM ###



# Install Sidekiq as a system service
sudo apt-get install redis-server
# See https://github.com/mperham/sidekiq/tree/master/examples/upstart/manage-many
# ==> install the scripts attached below

# make a dir for sidekiq worker pidfiles
mkdir -p /home/vagrant/apps/my_app/shared/pids

# start the workers:
sudo start sidekiq-manager


# Test everything out:
touch my-file.txt
curl --form "theFile=@my-file.txt;filename=desired-filename.txt" --form userID=1 --form param2=value2 http://sample.com/ece1779/servlet/FileUpload


### TRINIDAD NOTES

# Start the server manually:
cd /vagrant
jruby  --server -J-Djruby.compile.mode=FORCE -J-XX:MaxPermSize=1024m -J-Xmx3000m -S trinidad --threadsafe  --load daemon


### PUMA NOTES

bundle exec puma  -b unix:///var/run/my_app.sock  -e ...


### OTHER NOTES
- TorqueBox (JBoss) is an alternative






========
/etc/init/sidekiq.conf:

# /etc/init/sidekiq.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See sidekiq-manager.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start sidekiq app=/path/to/app index=0
#   sudo stop sidekiq app=/path/to/app  index=0
#   sudo status sidekiq app=/path/to/app index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description "Sidekiq Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping sidekiq-manager or runlevel [06])

# change apps to match your deployment user if you want to use this as a less privileged user (recommended!)
setuid vagrant
setgid vagrant
env HOME=/home/vagrant

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq.  Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM

instance ${app}-${index}

script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<'EOT'
  # Pick your poison :) Or none if you're using a system wide installed Ruby.
  # rbenv
  # source /home/apps/.bash_profile
  # OR
  # source /home/apps/.profile
  # OR system:
  source /etc/profile.d/rbenv.sh
  #
  # rvm
  # source /home/apps/.rvm/scripts/rvm

  logger -t sidekiq "Starting process: $app-$index"

  # Logs out to /var/log/upstart/sidekiq.log by default

  cd $app
  exec bundle exec sidekiq -i ${index} -e production -P ${app}/../shared/pids/sidekiq-${index}.pid
EOT
end script

pre-stop script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<'EOT'
  # Pick your poison :) Or none if you're using a system wide installed Ruby.
  # rbenv
  # source /home/apps/.bash_profile
  # OR
  # source /home/apps/.profile
  # OR system:
  source /etc/profile.d/rbenv.sh
  #
  # rvm
  # source /home/apps/.rvm/scripts/rvm

  logger -t sidekiq "Stopping process: $app-$index"

  # Logs out to /var/log/upstart/sidekiq.log by default

  cd $app
  exec bundle exec sidekiqctl stop ${app}/../shared/pids/sidekiq-${index}.pid 2> /dev/null
EOT
end script

============
/etc/init/sidekiq-manager.conf:

# /etc/init/sidekiq-manager.conf - manage a set of Sidekiqs

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See sidekiq.conf for how to manage a single Sidekiq instance.
#
# Use "stop sidekiq-manager" to stop all Sidekiq instances.
# Use "start sidekiq-manager" to start all instances.
# Use "restart sidekiq-manager" to restart all instances.
# Crazy, right?
#

description "Manages the set of sidekiq processes"

# This starts upon bootup and stops on shutdown
start on runlevel [2345]
stop on runlevel [06]

# Set this to the number of Sidekiq processes you want
# to run on this machine
env SIDEKIQ_CONF=/etc/sidekiq.conf

pre-start script
  for i in `cat $SIDEKIQ_CONF`; do
    app=`echo $i | cut -d , -f 1`
    num_workers=`echo $i | cut -d , -f 2`
    for j in `seq 0 $(($num_workers - 1))`; do
      start sidekiq app=$app index=$j
    done
  done
end script

==========
/etc/sidekiq.conf:

/home/vagrant/apps/my_app/current,2


